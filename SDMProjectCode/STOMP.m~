function u = STOMP(env, K)
    
    %#######################################
    %############## VARIABLES ##############
    %#######################################
    NUM_OF_INPUTS = env.NUM_OF_INPUTS;
    H = 10;                                             % STOMP regularizing term
    time_array = env.DELTA_T * linspace(1, env.POINTS_IN_TRAJ);
    nom_traj = env.U_NOM;                           % nominal initial trajectory

    %###########################################
    %############## VISUALIZATION ##############
    %###########################################
    STOMP_1            = false;
    STOMP_2            = true;



    
    % K is number of noisy trajectories to try
    % env is the enviornment that we test over
    
    % Create K trajectories by adding Noise
    STOMP_traj = cell(K,1);
    POINTS_IN_TRAJ = env.POINTS_IN_TRAJ;
    [M, A, R_1] = precompute(POINTS_IN_TRAJ);   % Smoothing array for STOMP
    

    for i = 1:50 % iterations over STOMP
        
        R_1 = (R_1 + R_1') / 2; %need this for mvnrnd to work - i have no idea why
        % https://www.mathworks.com/matlabcentral/answers/63168-error-message-in-using-mvnrnd-function
        noise = mvnrnd(zeros(1, POINTS_IN_TRAJ), R_1, K);
        for i_K = 1:K
            %update noise to be sampled from R^-1
           % first and last points shouldn't change
%            noise(i_K, 1, :) = [0, 0]; noise(i_K, end, :) = [0, 0];
%            STOMP_traj{i_K} = [pos_traj, vel_traj] + squeeze(noise(i_K,:,:));
%            STOMP_traj{i_K} = [pos_traj, vel_traj] + noise(i_K,:)';
            STOMP_traj{i_K} = nom_traj + noise(i_K,:)';
            z0 = [0,0]; %initial condition
            [z_new, p_unsafe] = env.forward_traj(z0, STOMP_traj{i_K});
            pos_traj_init = z_new(:,1);
            vel_traj_init = z_new(:,2);
            STOMP_traj{i_K} = [STOMP_traj{i_K}, z_new];
            
           if STOMP_1
               plot(pos_traj, 'ro')
               hold on
               plot(vel_traj, 'bo')
               hold off
               title('STOMP Trajectories')
               pause(0.1)
           end
        end

        acc_traj = zeros(K, POINTS_IN_TRAJ);
        cost = zeros(K, POINTS_IN_TRAJ);
        for i_K = 1:K
%             acc_traj(i_K,:) = [diff(STOMP_traj{i_K}(:,2)); 0];
            for i_PIJ = 1:POINTS_IN_TRAJ
                % should this be one cost for all state?
                cost(i_K, i_PIJ) = S(STOMP_traj{i_K}(i_PIJ, 2:3), env.END_STATE);
                %- STOMP_traj{i_K}(i_PIJ, 2:3) ^ 2; 
                
            end
        end
        
        importance_weighting = zeros(K, POINTS_IN_TRAJ, NUM_OF_INPUTS);
        for i_step = 1:length(STOMP_traj{1}(:,1)) % each point in trajectory
            for i_K = 1:K % each trajectory
            % Weight all points sampled during STOMP 
                for i_input = 1:NUM_OF_INPUTS
                    num = cost(i_K, i_step) - min(cost(:, i_step));
                    den = max(cost(:, i_step)) - min(cost(:, i_step));
                    importance_weighting(i_K, i_step, i_input) = exp(-H * num/den); 
                end
            end
            
            %normalize for softmax
            for i_input = 1:NUM_OF_INPUTS
                importance_weighting(:, i_step, i_input) = importance_weighting(:, i_step, i_input) / sum(importance_weighting(:, i_step, i_input));
            end
        end

        % add that to original trajectory
        % will need to do something if there are multiple inputs
        delta = zeros(POINTS_IN_TRAJ, 1);
        for i_step = 1:length(delta) % this can be done with a single matrix operation
            % delta = sum (prob * noise) for each variation at that point
            delta(i_step) = sum(importance_weighting(:, i_step) .* noise(i_step));

        end
        % Smooth with M = smoothing factor
        delta_smooth = M * delta;
        
        u_traj_new = env.U_NOM + delta_smooth;
        u_traj_new = max(min(u_traj_new, env.U_MAX), env.U_MIN);
        [z_new, p_new] = env.forward_traj(env.START_STATE, u_traj_new);
        pos_traj_new = z_new(:,1);
        vel_traj_new = z_new(:,2);
        

        if STOMP_2
            figure(1)
            subplot(2,1,1)
            hold on
            plot(env.U_
            subplot(2,1,2)
            hold on
%             plot(time_array, pos_traj, 'ro', time_array, vel_traj, 'bo')
            plot(time_array, pos_traj_new, 'r*', time_array, vel_traj_new, 'b*')
            hold off
            title('Completed STOMP Trajectory')
            pause(.1)
        end

        pos_traj_init = pos_traj_new;
        vel_traj_init = vel_traj_new;
        nom_traj = u_traj_new;
    end
    
u = u_traj_new;

    function c = S(state, end_state) %this should be part of env?
        pos = state(1);
        vel = state(2);
        % penalized for being far from goal and having high velocity
        c = (end_state(1) - pos)^2 + (end_state(2) - vel)^2; 
    end
end